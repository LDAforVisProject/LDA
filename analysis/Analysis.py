'''
Created on 04.09.2014

@file: Analysis.py
@author: RM
@since: 2014-09-04

Analyses topics generated by LDA.py (distance function calculations,
distribution of probabilities, etc.).

'''

import numpy as np
import operator
from dataModel.Topic import Topic
#import dataModel.Topic as Topic

class Analysis():
    # Constructor
    def __init__(self, __location__, logger):
        # Set auxiliary variables
        self.__location__ = __location__
        self.logger = logger
    
    '''
    Currently compares alpha-sampled data only.
    '''
    def compareSampledData(self, fileList, k, alignment):
        self.logger.info("Analyzing alpha-sampled topics.")
        
        topicLists = dict()
        # Generate topic from files produced by LDA.
        for alpha, fileLocation in fileList.iteritems():
            print alpha
            print fileLocation
            topicList = Topic.generateTopicsFromFile(fileLocation, k, alignment)
            topicLists[alpha] = topicList
            
        sortedTopicLists = sorted(topicLists.items(), key = operator.itemgetter(0), reverse=True)
                     
        for topicIndex in np.arange(0, k):
            print "Topic #" + str(topicIndex)
            for item in sortedTopicLists:
                print "    alpha = " + str(item[0])
                print item[1][topicIndex].printLimitedKeywordList(5)
        '''
        for topicList, alpha in topicLists:
            print "topicList #" + str(count)
            for topic in topicList:
                print topic.printLimitedKeywordList(5)
            count = count + 1
        #topics[0].plotKeywordProbabilities()
        '''
        '''   
        # Test: Compare two topics with...
        #    ...L2 distance/norm
        print "L2: " + str(topics[0].calculateL2Distance(topics[1]))
        #    ..Kullback-Leibler distance
        print "Kullback-Leibler: " + str(topics[0].calculateKullbackLeiblerDistance(topics[1]))
        #    ...Jensen-Shannon divergence
        print "Jensen-Shannon: " + str(topics[0].calculateJensenShannonDivergence(topics[1]))
        #    ...Bhattacharyya distance
        print "Bhattacharyya: " + str(topics[0].calculateBhattacharyyaDistance(topics[1]))
        #    ...Hellinger distance
        print "Hellinger: " + str(topics[0].calculateHellingerDistance(topics[1]))
        '''