'''
Created on 04.09.2014

@file: Analysis.py
@author: RM
@since: 2014-09-04

Analyses topics generated by LDA.py (distance function calculations,
distribution of probabilities, etc.).

'''

import os, csv, re
import time
from DistanceFunction import *

__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))

print __location__

# Model parameters
''' 
@todo: Model parameters to be delivered as arguments, not to be specificed as constants. 
''' 
k = 20

# One map/dictionary for each topic: keyword -> probability for this topic
keywordProbability_maps = [dict() for x in range(k)]
#print len(keywordProbability_maps)

# Open csv with LDA topics
with open('data/LDATopics.csv', 'rb') as topicfile:
    topiclist = csv.reader(topicfile, delimiter=' ', quotechar='|')
    # i denotes number of row in csv (up to number of features)
    i = 0
    topicKeywords = []
    
    for row in topiclist:
        if i > 0:
            topicKeywords = row[0].split(',')
            print '\n----------------\nrow #' + str(i) + "\n----------------"
        
            # Insert data into maps.
            # inner_i denotes number of current topic this keyword/probability mapping is associated with.
            inner_i = 0
            for keywordProbabilities in topicKeywords:
                # data contains [0]: keyword and [1]: probability
                data = keywordProbabilities.split('|')
                # Store keyword as key, probability as value
                # Temporary workaround: Only execute if branch if STRING|FLOAT existent. Then remove " from data 
                # (should be cleared once encoding - on workflow-scope - is fixed).
                if len(data) > 1:
                    data[1] = data[1].replace('"', '')
                    keywordProbability_maps[inner_i][data[0]] = float(data[1])
                
                    print data
                    #print keywordProbability_maps[inner_i]
                    inner_i = inner_i + 1
        
        i = i + 1
        topicKeywords = []
        
# Instantiate distance function object 
df = NaiveDistanceFunction()

# Test distance calculation for two topics (here: between topic 1 and topic 2)
df.calculateDistance(keywordProbability_maps[0], keywordProbability_maps[1])